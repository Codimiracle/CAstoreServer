<?php
namespace CAstore\Utils;

use CAstore\Model\Entity\UserInfo;
use Deline\Model\Database\MySQLDataSource;
use PHPUnit\Framework\TestCase;

class UserInfoDAOImplTest extends TestCase
{
    private $accessor;
    /**
     * @var UserInfoDAO
     */
    private $dao;
    private $testUserInfo;
    protected function setUp()
    {
        parent::setUp();
        $database = array();
        $database["database_host"] = "localhost";
        $database["database_name"] = "test";
        $database["database_username"] = "root";
        $database["database_password"] = "Codimiracle855866";
        $this->accessor = new MySQLDataSource($database);
        $this->accessor->getConnection()->exec("
            TRUNCATE `user`;
            TRUNCATE `content`;"
        );
        $this->dao = new IUserInfoDAO();
        $this->dao->setDataSource($this->accessor);
        $this->testUserInfo = new UserInfo();
        $this->testUserInfo->name = "Hello";
        $this->testUserInfo->description = "Descripton";
        $this->testUserInfo->gender = 1;
        $this->testUserInfo->nickname = "Hello af";
        $this->testUserInfo->password = "a123";
        $this->testUserInfo->roleId = 1;
    }

    public function testInsert() {
        $this->dao->setTarget($this->testUserInfo);
        $this->dao->insert();
        $testUserInfo = $this->dao->queryById(1);
        self::assertNotNull($testUserInfo, "insertion should be success!!");
        self::assertEquals($this->testUserInfo->name, $testUserInfo->getName());
        self::assertEquals($this->testUserInfo->description, $testUserInfo->getDescription());
        self::assertEquals($this->testUserInfo->gender, $testUserInfo->getGender());
        self::assertEquals($this->testUserInfo->nickname, $testUserInfo->getNickname());
        self::assertEquals($this->testUserInfo->password, $testUserInfo->getPassword());
        self::assertEquals($this->testUserInfo->roleId, $testUserInfo->getRoleId());
    }

    public function testDelete() {
        $this->testInsert();
        $userInfo = $this->dao->queryById(1);
        $this->dao->setTarget($userInfo);
        $this->dao->delete();
        $actualUserInfo = $this->dao->queryById(1);
        self::assertNull($actualUserInfo, "the data should be deleted!!");
    }

    public function testUpdate() {
        $this->testInsert();
        $testUserInfo = $this->dao->queryById(1);
        $testUserInfo->setNickName("BOSM");
        $testUserInfo->setName("Hi");
        $testUserInfo->setDescription("mmm");
        $testUserInfo->setGender(2);
        $testUserInfo->setPassword("dfds23");
        $testUserInfo->setRoleId(2);
        $this->dao->setTarget($testUserInfo);
        $this->dao->update();
        $testUserInfo = $this->dao->queryById(1);
        self::assertEquals("BOSM", $testUserInfo->getNickname());
        self::assertEquals("Hi", $testUserInfo->getName());
        self::assertEquals("mmm", $testUserInfo->getDescription());
        self::assertEquals(2, $testUserInfo->getGender());
        self::assertEquals("dfds23", $testUserInfo->getPassword());
        self::assertEquals(2, $testUserInfo->getRoleId());
    }

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->accessor->getConnection()->exec("
            TRUNCATE `user`;
            TRUNCATE `content`;"
        );
    }
}
